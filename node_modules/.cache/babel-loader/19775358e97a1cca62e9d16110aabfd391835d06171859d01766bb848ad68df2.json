{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from 'vuex';\nimport shop from '@/api/productfile';\nimport eventShop from '@/api/eventfile';\nexport default createStore({\n  state: {\n    products: [],\n    events: [],\n    cart: []\n  },\n  getters: {\n    availableProducts(state) {\n      return state.products;\n    },\n    availableEvents(state) {\n      return state.events;\n    },\n    cartProducts(state) {\n      return state.cart;\n    },\n    cartEvents(state) {\n      return state.cart;\n    },\n    cartTotal(state, getters) {\n      return getters.cartProducts.reduce((total, product) => total + product.price * product.quantity, 0);\n    },\n    cartIteming(state) {\n      return state.cart.length;\n    }\n  },\n  mutations: {\n    setProducts(state, products) {\n      state.products = products;\n    },\n    setEvents(state, events) {\n      state.events = events;\n    },\n    pushProductToCart(state, product) {\n      state.cart.push({\n        id: product.id,\n        quantity: 1,\n        title: product.name,\n        price: product.price,\n        productprice: product.price,\n        newQuantityInStock: product.quantityInStock\n      });\n    },\n    pushEventToCart(state, event) {\n      state.cart.push({\n        id: event.id,\n        quantity: 1,\n        title: event.name,\n        price: event.price,\n        productprice: event.price,\n        newQuantityInStock: event.quantityInStock\n      });\n    },\n    popProductFromCart(state) {\n      state.cart.pop();\n    },\n    removeAllProducts(state) {\n      state.cart = [];\n    },\n    incrementProductInventory(state, product) {\n      product.quantityInStock--;\n    },\n    incrementEventInventory(state, event) {\n      event.quantityInStock--;\n    },\n    incrementItemQuantity(state, cartItem) {\n      const product = state.products.find(product => product.id === cartItem.id);\n      cartItem.quantity++;\n      product.quantityInStock--;\n      cartItem.productprice = cartItem.quantity * product.price;\n    }\n  },\n  actions: {\n    fetchProducts({\n      commit\n    }) {\n      return new Promise(resolve => {\n        shop.getProducts(products => {\n          commit('setProducts', products);\n          resolve();\n        });\n      });\n    },\n    fetchEvents({\n      commit\n    }) {\n      return new Promise(resolve => {\n        eventShop.getEvents(events => {\n          commit('setEvents', events);\n          resolve();\n        });\n      });\n    },\n    addProductToCart(context, product) {\n      if (product.quantityInStock > 0) {\n        const cartItem = context.state.cart.find(item => item.id === product.id);\n        if (!cartItem) {\n          context.commit('pushProductToCart', product);\n        } else {\n          context.commit('incrementItemQuantity', cartItem);\n        }\n      }\n    },\n    addEventToCart(context, event) {\n      if (event.quantityInStock > 0) {\n        const cartItem = context.state.cart.find(item => item.id === event.id);\n        if (!cartItem) {\n          context.commit('pushEventToCart', event);\n        } else {\n          context.commit('incrementItemQuantity', cartItem);\n        }\n      }\n    },\n    removeProduct(context, product) {\n      context.commit('popProductFromCart', product.id);\n      context.commit('incrementProductInventory', product);\n    },\n    removeEvent(context, event) {\n      context.commit('popEventFromCart', event.id);\n      context.commit('incrementEventInventory', event);\n    },\n    removeCartProducts(context) {\n      context.commit('removeAllProducts');\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","shop","eventShop","state","products","events","cart","getters","availableProducts","availableEvents","cartProducts","cartEvents","cartTotal","reduce","total","product","price","quantity","cartIteming","length","mutations","setProducts","setEvents","pushProductToCart","push","id","title","name","productprice","newQuantityInStock","quantityInStock","pushEventToCart","event","popProductFromCart","pop","removeAllProducts","incrementProductInventory","incrementEventInventory","incrementItemQuantity","cartItem","find","actions","fetchProducts","commit","Promise","resolve","getProducts","fetchEvents","getEvents","addProductToCart","context","item","addEventToCart","removeProduct","removeEvent","removeCartProducts","modules"],"sources":["C:/Users/HP/Documents/GitHub/didi/whiteswan/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport shop from '@/api/productfile'\r\nimport eventShop from '@/api/eventfile'\r\n\r\n\r\nexport default createStore({\r\n  state: {\r\n   products: [],\r\n   events:[],\r\n   cart: []\r\n  },\r\n  getters: {\r\n    availableProducts (state) {\r\n      return state.products\r\n    },\r\n\r\n    availableEvents (state) {\r\n      return state.events\r\n    },\r\n\r\n    cartProducts (state) {\r\n      return state.cart\r\n    },\r\n\r\n    cartEvents (state) {\r\n      return state.cart\r\n    },\r\n    \r\n    cartTotal (state, getters) {\r\n      return getters.cartProducts.reduce((total, product) => total + (product.price * product.quantity), 0)\r\n    },\r\n    \r\n    cartIteming(state){\r\n      return state.cart.length\r\n    }\r\n\r\n  },\r\n  mutations: {\r\n    setProducts (state,products){\r\n      state.products = products\r\n    },\r\n    setEvents (state,events){\r\n      state.events = events\r\n    },\r\n\r\n    pushProductToCart (state, product) {\r\n      state.cart.push({\r\n        id: product.id,\r\n        quantity: 1,\r\n        title: product.name,\r\n        price: product.price,\r\n        productprice: product.price,\r\n        newQuantityInStock: product.quantityInStock\r\n      })\r\n    },\r\n    pushEventToCart (state, event) {\r\n      state.cart.push({\r\n        id: event.id,\r\n        quantity: 1,\r\n        title: event.name,\r\n        price: event.price,\r\n        productprice: event.price,\r\n        newQuantityInStock: event.quantityInStock\r\n      })\r\n    },\r\n    popProductFromCart(state){\r\n      state.cart.pop()\r\n    },\r\n    removeAllProducts(state){\r\n      state.cart = []\r\n    },\r\n    incrementProductInventory (state, product) {\r\n      product.quantityInStock--\r\n    },\r\n    incrementEventInventory (state, event) {\r\n      event.quantityInStock--\r\n    },\r\n    incrementItemQuantity (state, cartItem) {\r\n      const product = state.products.find(product => product.id === cartItem.id)\r\n      cartItem.quantity++\r\n      product.quantityInStock--\r\n      cartItem.productprice = cartItem.quantity * product.price\r\n    }\r\n\r\n\r\n  },\r\n  actions: {\r\n    fetchProducts ({commit}) {\r\n      return new Promise((resolve) => {\r\n        shop.getProducts(products => {\r\n          commit('setProducts', products)\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    fetchEvents ({commit}) {\r\n      return new Promise((resolve) => {\r\n        eventShop.getEvents(events => {\r\n          commit('setEvents', events)\r\n          resolve()\r\n        })\r\n      })\r\n    },\r\n    addProductToCart (context, product) {\r\n      if (product.quantityInStock > 0) {\r\n        const cartItem = context.state.cart.find(item => item.id === product.id)\r\n        if (!cartItem) {\r\n          context.commit('pushProductToCart', product)\r\n        } else {\r\n          context.commit('incrementItemQuantity', cartItem)\r\n        }\r\n\r\n      }\r\n    },\r\n    addEventToCart (context, event) {\r\n      if (event.quantityInStock > 0) {\r\n        const cartItem = context.state.cart.find(item => item.id === event.id)\r\n        if (!cartItem) {\r\n          context.commit('pushEventToCart', event)\r\n        } else {\r\n          context.commit('incrementItemQuantity', cartItem)\r\n        }\r\n\r\n      }\r\n    },\r\n    removeProduct (context, product) {\r\n      context.commit('popProductFromCart', product.id)\r\n      context.commit('incrementProductInventory', product)\r\n    },\r\n    removeEvent (context, event) {\r\n      context.commit('popEventFromCart', event.id)\r\n      context.commit('incrementEventInventory', event)\r\n    },\r\n    removeCartProducts(context){\r\n      context.commit('removeAllProducts')\r\n    }\r\n\r\n  },\r\n  modules: {\r\n  }\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}